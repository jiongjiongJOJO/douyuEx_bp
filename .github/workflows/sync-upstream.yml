name: Sync Upstream and Build

on:
  schedule:
    # 每天UTC时间00:00运行 (北京时间08:00)
    - cron: '0 0 * * *'
  workflow_dispatch:
    # 允许手动触发
  push:
    branches:
      - master
    paths:
      - '.github/workflows/sync-upstream.yml'

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up upstream remote
      run: |
        git remote add upstream https://github.com/qianjiachun/douyuEx.git || true
        git fetch upstream

    - name: Check for upstream changes
      id: check-changes
      run: |
        # 获取当前分支和上游master分支的最新commit
        LOCAL_COMMIT=$(git rev-parse HEAD)
        UPSTREAM_COMMIT=$(git rev-parse upstream/master)
        
        echo "local_commit=$LOCAL_COMMIT" >> $GITHUB_OUTPUT
        echo "upstream_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
        
        if [ "$LOCAL_COMMIT" != "$UPSTREAM_COMMIT" ]; then
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "检测到上游更新"
        else
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "没有检测到上游更新"
        fi

    - name: Sync upstream changes
      if: steps.check-changes.outputs.changes_detected == 'true'
      run: |
        # 配置git用户信息
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        
        # 备份当前的build-output目录（如果存在）
        if [ -d "build-output" ]; then
          echo "🔄 备份现有的build-output目录..."
          cp -r build-output build-output-backup
        fi
        
        # 尝试合并上游更新
        echo "🔄 尝试合并上游更新..."
        if git merge upstream/master --no-edit; then
          echo "✅ 成功合并上游更新"
        else
          echo "⚠️ 合并冲突，使用智能同步策略"
          
          # 保存重要文件
          IMPORTANT_FILES=()
          if [ -d "build-output" ]; then
            IMPORTANT_FILES+=("build-output")
          fi
          if [ -f ".github/workflows/sync-upstream.yml" ]; then
            IMPORTANT_FILES+=(".github")
          fi
          
          # 备份重要文件
          for item in "${IMPORTANT_FILES[@]}"; do
            if [ -e "$item" ]; then
              echo "📦 备份重要文件: $item"
              cp -r "$item" "${item}-temp-backup"
            fi
          done
          
          # 强制重置到上游
          git reset --hard upstream/master
          
          # 恢复重要文件
          for item in "${IMPORTANT_FILES[@]}"; do
            if [ -d "${item}-temp-backup" ]; then
              echo "🔄 恢复重要文件: $item"
              rm -rf "$item" 2>/dev/null || true
              mv "${item}-temp-backup" "$item"
            fi
          done
        fi
        
        # 恢复build-output备份（如果存在）
        if [ -d "build-output-backup" ]; then
          echo "🔄 恢复build-output目录..."
          rm -rf build-output 2>/dev/null || true
          mv build-output-backup build-output
        fi

    - name: Setup Node.js
      if: steps.check-changes.outputs.changes_detected == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      if: steps.check-changes.outputs.changes_detected == 'true'
      run: npm install

    - name: Build project and manage directories
      if: steps.check-changes.outputs.changes_detected == 'true'
      run: |
        echo "📊 同步后的目录状态:"
        echo "🔸 当前dist目录:"
        if [ -d "dist" ]; then
          echo "  存在 (来自上游)"
          ls -la dist/ | head -3
        else
          echo "  不存在"
        fi
        
        echo "🔸 当前build-output目录:"
        if [ -d "build-output" ]; then
          echo "  存在 (之前的构建)"
          ls -la build-output/ | head -3
        else
          echo "  不存在"
        fi
        
        # 保存上游的dist目录（如果存在）
        UPSTREAM_DIST_EXISTS=false
        if [ -d "dist" ]; then
          echo "🔄 保存上游dist目录..."
          cp -r dist dist-upstream-original
          UPSTREAM_DIST_EXISTS=true
          echo "✅ 上游dist目录已保存"
        fi
        
        # 运行构建 - 这会创建或覆盖dist目录
        echo "🔨 开始构建Fork版本..."
        npm run build
        
        # 检查构建是否成功
        if [ -d "dist" ] && [ -f "dist/douyuex.js" ]; then
          echo "✅ Fork版本构建成功"
          ls -la dist/
          
          # 将Fork构建结果复制到build-output
          cp -r dist build-output
          echo "✅ Fork构建结果已保存到build-output/"
          
          # 恢复上游的dist目录
          if [ "$UPSTREAM_DIST_EXISTS" == "true" ]; then
            echo "🔄 恢复上游原始dist目录..."
            rm -rf dist
            mv dist-upstream-original dist
            echo "✅ 上游dist目录已恢复"
          else
            echo "ℹ️ 上游没有dist目录，保留构建的dist目录"
          fi
        else
          echo "❌ 构建失败"
          # 如果构建失败，恢复上游dist
          if [ "$UPSTREAM_DIST_EXISTS" == "true" ]; then
            rm -rf dist 2>/dev/null || true
            mv dist-upstream-original dist
            echo "🔄 已恢复上游dist目录"
          fi
          exit 1
        fi
        
        # 显示最终状态
        echo ""
        echo "📊 最终目录状态:"
        echo "🔸 dist/ (上游原版):"
        if [ -d "dist" ]; then
          ls -la dist/ | head -3
        else
          echo "  不存在"
        fi
        echo "🔸 build-output/ (Fork构建版本):"
        if [ -d "build-output" ]; then
          ls -la build-output/ | head -3
        else
          echo "  不存在"
        fi

    - name: Commit and push changes
      if: steps.check-changes.outputs.changes_detected == 'true'
      run: |
        # 添加所有更改
        git add -A
        
        # 检查是否有更改需要提交
        if git diff --staged --quiet; then
          echo "没有需要提交的更改"
        else
          # 提交更改
          git commit -m "🤖 自动同步上游代码并构建 ($(date '+%Y-%m-%d %H:%M:%S'))"
          
          # 推送到origin
          git push origin master
          
          echo "✅ 成功同步上游代码并提交构建结果"
        fi

    - name: Create release info
      if: steps.check-changes.outputs.changes_detected == 'true'
      run: |
        echo "## 🚀 自动构建完成" > release-info.md
        echo "" >> release-info.md
        echo "- **构建时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> release-info.md
        echo "- **上游commit**: ${{ steps.check-changes.outputs.upstream_commit }}" >> release-info.md
        echo "- **本地commit**: ${{ steps.check-changes.outputs.local_commit }}" >> release-info.md
        echo "" >> release-info.md
        echo "### 📦 目录说明" >> release-info.md
        echo "- \`dist/\` - 上游原版构建文件（保持与上游同步）" >> release-info.md
        echo "- \`build-output/\` - Fork版本构建文件（本次CI构建产物）" >> release-info.md
        echo "" >> release-info.md
        echo "### 📄 构建产物 (build-output)" >> release-info.md
        if [ -d "build-output" ]; then
          for file in build-output/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              filesize=$(du -h "$file" | cut -f1)
              echo "- 📄 \`$filename\` ($filesize)" >> release-info.md
            fi
          done
        fi
        echo "" >> release-info.md
        echo "### 📄 上游文件 (dist)" >> release-info.md
        if [ -d "dist" ]; then
          for file in dist/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              filesize=$(du -h "$file" | cut -f1)
              echo "- 📄 \`$filename\` ($filesize)" >> release-info.md
            fi
          done
        fi

    - name: Upload build artifacts
      if: steps.check-changes.outputs.changes_detected == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ github.run_number }}
        path: build-output/
        retention-days: 30

    - name: Summary
      run: |
        if [ "${{ steps.check-changes.outputs.changes_detected }}" == "true" ]; then
          echo "✅ 同步完成！上游代码已更新并成功构建" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "release-info.md" ]; then
            cat release-info.md >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "ℹ️ 没有检测到上游更新，无需同步" >> $GITHUB_STEP_SUMMARY
        fi
